
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

NamedQueries:
-------------
old approach in sql & hql:

SQL	=>select * from product where pcost>17000;

HQL	=>select * from Product p where p.pcost>17000;

->In sql & hql user need to prepare queries manualy everytime
->Here there is no reusability of queries

->NamedQueries providing  feature i.e Write Query Once Use Any Number Times u can use it
->Here we have reusability of queries

syntax:

	<query name="NameOfUrQuery">
		<![CDATA[select p from Product p ]]>
	</query>

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

<?xml version="1.0"?>
<!DOCTYPE hibernate-mapping PUBLIC
"-//Hibernate/Hibernate Mapping DTD 3.0//EN"
"http://hibernate.sourceforge.net/hibernate-mapping-3.0.dtd">

<hibernate-mapping> 
   <class name="Product" table="products">  
		<id name="productId" column="pid"  />
		<property name="proName" column="pname" length="10"/>
		<property name="price"/>
    </class>
    <query name="q1">
		<![CDATA[select p from Product p where p.price<:tvar1]]>
	</query>
	
	<!--<query name="q1">
		<![CDATA[delete  from Product p where p.price>:tavr2]]>
	</query>-->
	
</hibernate-mapping>
----------------------------------------------------------------------------------------------
		Query qry=session.getNamedQuery("q1");
		qry.setParameter("tvar1",new Double(20000));
		//====CASE 2 starts===
		//Transaction tx=session.beginTransaction();
		//int k=qry.executeUpdate();
		//tx.commit();
		//System.out.println("Tra..."+k);
		//====CASE 2 ends===
		List l=qry.list();
		Iterator it=l.iterator();
		while(it.hasNext())
		{
			Product p=(Product)it.next();
			System.out.println(p.getPrice());
		}
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

Object States:
--------------
1.Transient state
2.Persistent state
3.Detached state

Sample Code:


1.Load configuration file	=>Configuration
2.Get a high level object	=>SessionFactory

*********Transient state**********		(Before Session)

3.Prepare a session b.w FE & BE	=>Session


*********Persistent state**********		(In Session)

4.Create Pojo class object
	Emp ob=new Emp();
	ob.setEid(1001);
	ob.setEname("Arun");
	ob.setEsal(15000);
5.Create transaction object
6.save the object
	session.save(ob);	OR	session.persist(ob);


**********Detached state**********		(After Session)	

7.close objects
			
	session.close();	

1.Transient State:

	When a POJO class Object is created or if null value is assigned to POJO class object 
	then that object state is called as Transient State.
	If an object contains Transient state, then it implies that there is no relation between 
	POJO class Object to Database.
	Even if the object is changed dynamically, there will be no effect on Database.
	
2.Persistent State:

	When a POJO class Object is attached to Cache of Session Object of Hibernate then that 
	object state is Persistent State.
	When an Object state is converted to Persistent State then relation will be established 
	between POJO class Object and Database. 
	If any modifications occurs on the object, then it will effect on Database.
	When an Object State is converted from Transient State to Persistent State then 
	saving/loading/storing is performed on that Object.
	
3.Detached State:

	When POJO class Object comes out of the Session cache, Hibernate will call the object state into Detached State.
	When Object state is Detached and if any changes are performed, it will not effect on the Database.
	Object state is converted from Persistent state to Detached State by evicting (or) clearing the cache (or)
	closing a session.
	
Note:

	Object is converted from Detached State to Persistent State using update(), merge(), saveOrUpdate().
	Object is converted from Persistent State to Transient State by using delete().
	Object is changed to Transient State means the object is deleted from Cache and Database.
	

	
==============================================================================
save() vs persist():
==============================================================================

If our generator class is assigned, then there is no difference between save() and persist() methods. 
Because generator ‘assigned’ means, as  a programmer we need to give the primary key value to save in the database right.

In case of other than assigned generator class, suppose if our generator class name is Increment means hibernate it 
self will assign the primary key id value into the database right.

But here thing is,  save() method can return that primary key id value which is generated by hibernate where as
persist() will never give any value back to the client.









==============================================================================
update() vs merge():
==============================================================================
Both update() and merge() methods in hibernate are used to convert the object which is in 
detached state into persistence state. 


SessionFactory factory = cfg.buildSessionFactory();
Session session1 = factory.openSession();

Student s1 = null;
Object o = session1.get(Student.class, new Integer(101));
s1 = (Student)o;
session1.close();

s1.setMarks(97);

Session session2 = factory.openSession();
Student s2 = null;
Object o1 = session2.get(Student.class, new Integer(101));
s2 = (Student)o1;
Transaction tx=session2.beginTransaction();

session2.merge(s1);

==============================================================================

Generator class:
===============

The functionality of generator class is providing the primary key for an object while saving in the database. 

It will be written in the hibernate mapping file, by default assigning is the element will be generated if 
the developer did not mention. 

Generator class maps into the Mapping File using generator tag. 

It contain Generator Class Names.

Generator class tag is used under the Id tag in Mapping file.

Following are the generator Hibernate Classes available in hibernate assigned, increment, sequence are regularly used generator classes, 

assigned is the by default class.

	assigned
	increment
	sequence
	identify
	hilo
	native
	foreign
	uuid.hex
	uuid.string
	
Default:

			<id name="employeeId" column="eid">
				<generator class="assigned"/>
           </id>
		   
Configure:


			<id name="employeeId" column="id">
				<generator class="increment"/>
           </id>
		   