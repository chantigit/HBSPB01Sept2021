
I.Spring Core /IOC
	Bean Configurations
	Bean Life cycle
	Bean Scopes
	Bean Validations
	Bean Autowiring
	Annotations	: @Autowired,@Qualifier,@Required,@Scope,@Configuration,@Bean
				: @Component,@Service,@Controller,@Repository	

II.Spring Dao / Jdbc
	DriverManagerDataSource	
	JdbcTemplate		:  execute(),update(),query()

III.Spring Orm / Hibernate
	DriverManagerDataSource	
	HibernateTemplate	:  save(),update(),delete(),loadAll()

IV.Spring AOP	(Aspect Oriented Programming)

V.Spring JEE services

VI.Spring Web-Mvc
------------------------------------------------------------






class Atm
{
	1.logging service(b&a),2.rmi service(b),3.Tx mgmt service,4.Security service(b&a),5.WCS(b),6.GBS(a)
    	//business method1
	balanceEnq(cardnumber,pin)
	{
		logic for balanceEnq	(select amount from account where cardnumber =? and pin=?)  
	}

	1.logging service(b&f),2.rmi service(b),3.Tx mgmt service,4.Security service(b&a),5.WCS(b),6.GBS(a)
	//business method2
	diposit(cardnumber,pin,dipamt)
	{
		logic  for diposit	=>select amount from account where cardnumber =? and pin=?
					=>update account set amount=amount+? where  cardnumber =? 
					=>select amount from account where cardnumber =? and pin=?
	}

	1.logging service(b&f),2.rmi service(b),3.Tx mgmt service(throws),4.Security service(b&a),5.WCS(b),6.GBS(a)
	//business method3
	withdraw(cardnumber,pin,withdrawamt)
	{
		logic  for withdraw	=>select amount from account where cardnumber =? and pin=?
					=>update account set amount=amount-? where  cardnumber =? 
					=>select amount from account where cardnumber =? and pin=?
	}
}



OOP	(Object Oriented PS):	( CO-APIE )
===
class	AccountHolder
{
	balanaceEnq()	{}	
	diposit()	{}
	withdraw()	{}
	changepin()	{}	
	transfer()	{}
	editdetails()	{}
}
class	Employee
{}
class	Branch
{}
class	Loan
{}
class	BankingApp
{
	ArrayList<AccountHolder>	ob1;
	ArrayList<Employee>		ob2;
	ArrayList<Branch>		ob3;
	ArrayList<Loan>			ob4;
	...
}

AOP	(Aspect Oriented P S):	(Aspect,Advice,PointCut,JointCut,target,Interceptor,....)
====
Aspect	:	service name		
Advice	:	implementaion	of 	service 

		Types:	
			1.Before advice	: Which is triggered before business method
			2.After advice  : Which is triggered after business method
			3.Around advice : Which is triggered before & after business method
			4.Throws advice : Which is triggered when exception is raised inside business method
			
Q1. I want to create a thread class?

Ans: By implementing Runnable interface

Code:
	class	MyThread	implements	Runnable
	{
		@Override
		public	void	run()
		{

		}
	}

Q1. I want to create a BeforeAdvice class?
Ans: By implementing MethodBeforeAdvice interface
Code:
	class	MyBeforeAdvice	implements	MethodBeforeAdvice{
		@Override
		public	void	before(...){
		}
	}
Q2. I want to create a AfterAdvice class?
Ans: By implementing AfterReturningAdvice interface
Code:
	class	MyAfterAdvice	implements	AfterReturningAdvice{
		@Override
		public	void	afterReturning(...){
		}
	}
Q3. I want to create a AroundAdvice class?
Ans: By implementing MethodInterceptor interface
Code:
	class	MyAroundAdvice	implements	MethodInterceptor{
		@Override
		public	void	invoke(...){
		}
	}
Q4. I want to create a ThrowsAdvice class?
Ans: By implementing ThrowsAdvice  interface
Code:
	class	MyThrowsAdvice	implements	ThrowsAdvice {
		@Override
		public	void	validate(...){
		}
	}


Flow Of AOP:
=============
Step1:Prepare Interface & declare your business methods

	(Preparing Business Methods)
Step2: Prepare Bean class by implementing Above interface 

	(Preparing Service Methods)
Step3: Prepare Advice class by implementing Specific interface

Step4: Point Cut Mechanism : injecting service methods to business methods at runtime of the program

SpConfig file
==============
	1.Configure Bean classes	with ids
	2.Configure Advice classes  with ids
	3.Configure ProxyFactoryBean class which will do Point Cut operation 
	
	
	
	
	
Flow:
=====

Step1: Developer can write his business methods

	-> prepare YOUR interface 		& declare YOUR BM
	-> prepare YOUR implemenetd class 	& define YOUR BM

Step2: Developer can write his services 

Aspect(service name) & Advise(service implementation)	:	1.Before (I) 2.After(I) 3.Around(I) 4.Throws(I)

	-> Prepare A service class which implements ANY ONE INTERFACE as per ur requirement


Step3: At runtime services  are injected to business methods	(POINT CUT): inside config

	-> Configure your classes which have  business methods  : id1

	-> Configure your classes which have  service methods   : id2,id3

	-> ProxyFactoryBean will perform POINT CUT with the help 3 xml properties

		1.proxyInterfaces	: YOUR interface name
		2.interceptors		: delcare Advice classes id's
		3.target		: delcare id of Bean class which have BM

	}
